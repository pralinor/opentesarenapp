__init__(self,
__repr__(self):
set_height(self,
set_width(self,
get_height(self):
get_width(self):
get_lines(self):
add_line(self,
./src/trunk/DataExtraction/BSAFontElement.py
__init__(self,
=
=
get_header(self):
get_global_bsa_data(self):
get_offset(self):
get_filename(self):
get_frames(self):
set_header(self,
set_global_bsa_data(self,
set_offset(self,
set_filename(self,
set_frames(self,
_build_next_frame(self,
load(self):
dump(self,
=
./src/trunk/DataExtraction/BSADFA.py
__init__(self,
=
get_header(self):
get_offset(self):
get_size(self):
get_global_bsa_data(self):
get_filename(self):
get_frames(self):
set_header(self,
set_offset(self,
set_size(self,
set_global_bsa_data(self,
set_filename(self,
set_frames(self,
load(self):
dump(self,
=
./src/trunk/DataExtraction/BSACFA.py
__init__(self,
__repr__(self):
get_width_uncompressed(self):
get_width_compressed(self):
get_u2(self):
get_u3(self):
get_bits_per_pixel(self):
get_frame_count(self):
get_header_size(self):
get_size_in_bytes(self):
set_width_uncompressed(self,
set_width_compressed(self,
set_u2(self,
set_u3(self,
set_bits_per_pixel(self,
set_frame_count(self,
set_header_size(self,
load(self,
./src/trunk/DataExtraction/BSAHeaderCFA.py
__init__(self,
__repr__(self):
get_filename(self):
get_ramps(self):
get_lightmap(self):
get_buffer(self):
get_name(self):
get_flattened_ramps(self):
set_filename(self,
set_lightmap(self,
set_buffer(self,
load(self):
dump(self,
./src/trunk/DataExtraction/BSALightMap.py
__init__(self,
__repr__(self):
get_entry(self):
get_global_bsa_data(self):
get_data(self):
set_entry(self,
set_global_bsa_data(self,
set_data(self,
load(self):
dump(self,
./src/trunk/DataExtraction/BSAVOC.py
__init__(self,
__repr__(self):
get_offset_x(self):
get_offset_y(self):
get_flags(self):
get_record_size(self):
get_uncompressed_size(self):
set_offset_x(self,
set_offset_y(self,
set_flags(self,
set_record_size(self,
set_uncompressed_size(self,
./src/trunk/DataExtraction/BSAHeaderIMG.py
__init__(self,
=
=
get_headers(self):
get_offset(self):
get_file_name(self):
get_file_size(self):
get_frame_num(self):
get_width(self):
get_height(self):
get_data(self):
set_headers(self,
set_offset(self,
set_file_name(self,
set_file_size(self,
set_frame_num(self,
set_width(self,
set_height(self,
set_data(self,
load(self):
dump(self,
=
./src/trunk/DataExtraction/BSACIF.py
__init__(self,
__repr__(self):
__iter__(self):
__getitem__(self,
iteritems(self):
iterkeys(self):
itervalues(self):
items(self):
get_global_bsa_data(self):
get_entry_count(self):
get_file_size(self):
get_entry(self,
get_voc_entries(self):
get_cfa_entries(self):
get_dfa_entries(self):
get_cif_entries(self):
set_global_bsa_data(self,
set_entry_count(self,
set_file_size(self,
load(self):
./src/trunk/DataExtraction/BSAIndex.py
__init__(self,
__repr__(self):
set_filename(self,
set_symbols(self,
set_font_height(self,
get_filename(self):
get_symbols(self):
get_font_height(self):
_open(self):
_close(self):
load(self):
./src/trunk/DataExtraction/BSAFont.py
make_palette_red_first(pal):
make_palette_blue_first(pal):
make_palette_argb(pal):
__init__(self,
__repr__(self):
get_filename(self):
get_palette(self):
get_palette_blue_first(self):
get_palette_red_first(self):
set_filename(self,
set_palette(self,
_make_palette_blue_first(self):
_make_palette_red_first(self):
load(self):
flatten(self):
./src/trunk/DataExtraction/BSAPalette.py
__init__(self,
__repr__(self):
get_name(self):
get_size(self):
get_offset(self):
get_audio_data(self):
set_name(self,
set_size(self,
set_offset(self,
load2(self,
load(self,
to_wav(self,
import_from_global_bsa(self,
save(self,
./src/trunk/DataExtraction/BSAVOC_old.py
__init__(self,
__repr__(self):
__cmp__(self,
get_name(self):
get_size(self):
get_offset(self):
get_has_override(self):
set_name(self,
set_size(self,
set_offset(self,
set_has_override(self,
read(self,
./src/trunk/DataExtraction/BSAIndexEntry.py
__init__(self,
__repr__(self):
get_creative_voice(self):
get_mark_eof(self):
get_data_offset(self):
get_version(self):
get_twos_comp_version(self):
set_creative_voice(self,
set_mark_eof(self,
set_data_offset(self,
set_version(self,
set_twos_comp_version(self,
load(self,
./src/trunk/DataExtraction/BSAVOCHeader.py
__init__(self,
__repr__(self):
get_palettes(self):
get_fonts(self):
get_lightmaps(self):
get_cfas(self):
get_dfas(self):
dump_lightmaps(self):
dump_vocs(self):
dump_cfas(self):
dump_dfas(self):
dump_cifs(self):
dump_index_resources(self):
load_palettes(self):
load_fonts(self):
load_lightmaps(self):
=
=
=
=
load_vocs(self):
load_cfas(self):
=
=
=
=
load_dfas(self):
=
=
=
=
load_cifs(self):
=
=
=
=
load(self):
./src/trunk/DataExtraction/DataExtractionMain.py
__init__(self,
__repr__(self):
get_u1(self):
get_u2(self):
get_flags(self):
get_record_size(self):
set_u1(self,
set_u2(self,
set_flags(self,
set_record_size(self,
load(self,
load
./src/trunk/DataExtraction/BSAHeaderCIF.py
__init__(self,
__repr__(self):
get_frame_count(self):
get_u2(self):
get_u3(self):
get_compressed_size(self):
get_size_in_bytes(self):
set_frame_count(self,
set_u2(self,
set_u3(self,
set_compressed_size(self,
load(self,
./src/trunk/DataExtraction/BSAHeaderDFA.py
strip_unprintable(input_string):
bin(a):
rle_encode(unrle_data):
rle_decode(rle_data,
Demux7(pIn):
Demux6(pIn):
Demux5(pIn):
Demux4(pIn):
Demux3(pIn):
Demux2(pIn):
Demux1(pIn):
./src/trunk/Utils/Utils.py
__init__(self,
__getitem__(self,
write_control_extension(gif,
makedelta(fp,
compress(infile,
./src/trunk/Utils/gifmaker.py
TestBSAFont():
test_global_bsa():
test_load_voc():
./src/trunk/Main/Main.py
